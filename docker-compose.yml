version: '3'

services:
  
  postgres:
    build:
      context: ./Chatbot-Flask-Backend/
      dockerfile: Dockerfile.postgres
    container_name: postgresDB
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./Chatbot-Flask-Backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
  
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  esj-backend:
    image: aharoud/esj-backend:1.0.1
    container_name: esj-backend
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka11:19092
      TOPIC_NAME: ${PATIENT_UPDATES_TOPIC}
    depends_on:
      - postgres

  esj-frontend:
    #image: aharoud/esj-frontend:1.0.0
    build: ./esj-frontend
    container_name: esj-frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_SPRINGBOOT_API_URL: http://localhost:8080
      NEXT_PUBLIC_SPRING_SOCKET: ws://localhost:8080
      NEXT_PUBLIC_FLASK_API_URL: http://localhost:5000
      #NEXT_PUBLIC_EXPRESS_API_URL: http://localhost:7777
      JWT_SECRET: ${JWT_SECRET_KEY}
      GOOGLE_AI_API_KEY: ${GEMENI_API_KEY}
    depends_on:
      - esj-backend
    #  - express-server
  
  esj-chatbot:
    build: ./Chatbot-Flask-Backend
    container_name: esj-chatbot
    ports:
      - "5000:5000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PG_CONNECTION_STRING=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - PDF_FOLDER_PATH=${PDF_FOLDER_PATH}
      - FLASK_ENV=${FLASK_ENV}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - FLASK_DEBUG=${FLASK_DEBUG}
      - KAFKA_BOOTSTRAP_SERVERS=kafka11:19092
      - CLIENT_SECRETS_FILE=/app/${CLIENT_SECRETS_FILE}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - GOOGLE_DRIVE_FOLDER_ID=${GOOGLE_DRIVE_FOLDER_ID}
      - PATIENT_UPDATES_TOPIC=${PATIENT_UPDATES_TOPIC}
      - REPORTS_TOPIC=${REPORTS_TOPIC}
    depends_on:
      kafka11:
        condition: service_started
      postgres:
        condition: service_started
      redis:
        condition: service_started
    command: sh -c "gunicorn --bind 0.0.0.0:5000 app:app & python scheduler.py"

  zoo11:
    image: confluentinc/cp-zookeeper:latest
    hostname: zoo11
    container_name: zoo11
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo11:2888:3888

  kafka11:
    image: confluentinc/cp-kafka:latest
    hostname: kafka11
    container_name: kafka11
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka11:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo11:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo11

volumes:
  postgres_data:
  redis_data: